/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "id": 3,
     *   "active": 0,
     *   "amount": 7,
     *   "KID": 59488197,
     *   "payment_date": 15,
     *   "created": "2022-02-04T18:28:21.000Z",
     *   "last_updated": "2022-02-04T18:28:21.000Z",
     *   "notice": 1,
     *   "full_name": "Keno Johnsen"
     * }
     */
    AvtalegiroAgreement: {
      /** @description The Auto-generated id of a agreement */
      id: number;
      /** @description If the avtale agreement is active or not */
      active: boolean;
      /** @description Amount for the payment agreement */
      amount: number;
      /** @description The KID number for the agreement */
      KID: string;
      /**
       * Format: date-time 
       * @description The date for payment
       */
      payment_date: string;
      /**
       * Format: date-time 
       * @description Timestamp for when the agreement were created
       */
      created: string;
      /**
       * Format: date-time 
       * @description Timestamp for when the agreement were last updated
       */
      last_updated: string;
      /** @description If you recieve notification or not */
      notice: boolean;
      /** @description The full name of the donor */
      full_name: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
