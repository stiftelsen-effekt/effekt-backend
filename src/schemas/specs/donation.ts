/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "id": 217,
     *   "donor": "Jack Torance",
     *   "donorId": 237,
     *   "email": "jack@overlookhotel.com",
     *   "sum": "100.00",
     *   "transactionCost": "2.00",
     *   "method": "Bank",
     *   "KID": "00009912345678",
     *   "registered": "2018-03-29T23:00:00.000Z"
     * }
     */
    Donation: {
      /** @description The Auto-generated id of a donation */
      id?: number;
      /** @description Full name of the donor (first and last name) */
      donor?: string;
      /** @description The id of the donor */
      donorId?: number;
      /** @description The email of the donor */
      email?: string;
      /** @description The donation sum in decimal format */
      sum: string;
      /** @description The transaction cost of the donation in decimal format */
      transactionCost?: string;
      /** @description The payment method of the donation */
      method: string;
      /** @description The customer identification for the donation. Uniquely identifies the donor and the donation distribution. */
      KID: string;
      /**
       * Format: date-time 
       * @description The timestamp of the donation
       */
      registered?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
