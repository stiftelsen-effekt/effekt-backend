/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "id": 1234,
     *   "typeId": 10,
     *   "donorId": 3,
     *   "answer": "Moralfilosofisk tankeeksperiment",
     *   "timestamp": "2021-12-28T10:13:24.000Z",
     *   "session": "1657788222552",
     *   "active": "boolean;"
     * }
     */
    ReferralAnswer: {
      /** @description The auto-generated id of a referral answer */
      id: number;
      /** @description The auto-generated id of a referral type */
      typeId: number;
      /** @description The auto-generated id of the Donor */
      donorId: number;
      /** @description The referral answer */
      answer: string;
      /**
       * Format: date-time 
       * @description When the referral answer was registered
       */
      timestamp?: string;
      /** @description The web session */
      session?: string;
      /** @description Whether or not this referral type is currently enabled */
      active: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
