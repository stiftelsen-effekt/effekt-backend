/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "id": 237,
     *   "name": "Jack Torrance",
     *   "email": "jack@overlookhotel.com",
     *   "newsletter": true,
     *   "trash": false,
     *   "registered": "1921-07-04T23:00:00.000Z"
     * }
     */
    Donor: {
      /** @description The Auto-generated id of a donor */
      id: number;
      /** @description Donors email (unique identifier) */
      email: string;
      /** @description Full name of the donor (first and last name) */
      name: string;
      /** @description Set to true if donor wishes to subscribe to newsletter */
      newsletter?: boolean;
      /** @description Set to true if spam / test donor */
      trash?: boolean;
      /**
       * Format: date-time 
       * @description The date and time the donor was registered
       */
      registered?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
