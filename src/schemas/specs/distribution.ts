/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "KID": "000013901401",
     *   "shares": [
     *     {
     *       "id": 5,
     *       "name": "Against Malaria Foundation",
     *       "share": "25.00"
     *     },
     *     {
     *       "id": 6,
     *       "name": "GiveWells tildelingsfond",
     *       "share": "75.00"
     *     }
     *   ]
     * }
     */
    Distribution: {
      /** @description The KID of the distribution */
      KID?: string;
      shares?: (components["schemas"]["DistributionShare"])[];
    };
    /**
     * @example {
     *   "id": 5,
     *   "name": "Against Malaria Foundation",
     *   "share": "25.00"
     * }
     */
    DistributionShare: {
      /** @description The organization id */
      id?: number;
      /** @description The organization name */
      name?: string;
      /** @description The percentage share for the given organizations in decimal form */
      share?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
