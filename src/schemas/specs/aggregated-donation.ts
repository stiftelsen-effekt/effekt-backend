/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "ID": 1,
     *   "organization": "Against Malaria Foundation",
     *   "abbriv": "AMF",
     *   "value": "18.000000000000000000",
     *   "year": 2018
     * }
     */
    AggregatedDonation: {
      /** @description The organization's ID */
      ID?: number;
      /** @description The name of the organization */
      organization?: string;
      /** @description Abbreviation of the organization's name */
      abbriv?: string;
      /** @description The amount that was donated */
      value?: string;
      /** @description The year the donation was made */
      year?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
